use anchor_lang::prelude::*;

declare_id!("EuFNe455AVBBy2DfteTLQoPUCtzLMWqY24hX3QvjY4Bb");

pub const ANCHOR_DISCRIMINATOR_SIZE: usize = 8;

#[program]
pub mod Output{
    use super::*;

    pub fn input(context:Context<SetInput>, name: String, age: u8, gender: String) -> Result<()> {

        msg!("hello {}, i lernt your age is {}, and you are a {}. ", name, age, gender);

        context.accounts.storage.set_inner(Storage {
            name,
            age,
            gender
        });

        Ok(())
        
        
    }
}

#[account]
#[derive(InitSpace)]
pub struct Storage{
    #[max_len(50)]
    pub name: String,

    pub age: u8,

    #[max_len(10)]
    pub gender: String
}


#[derive(Accounts)]
pub struct SetInput<'info>{
    #[account(mut)]
    pub user: Signer<'info>,

    #[account(
        init_if_needed, 
        payer = user, 
        space = ANCHOR_DISCRIMINATOR_SIZE + Storage::INIT_SPACE, 
        seeds=[b"favorites", user.key().as_ref()],
    bump)]
    
    pub storage: Account<'info, Storage>,

    pub system_program: Program<'info, System>,


}